#!/usr/bin/env sh

export LS_COLORS="*~=0;38;2;91;96;120:bd=0;38;2;125;196;228;48;2;54;58;79:ca=0:cd=0;38;2;245;189;230;48;2;54;58;79:di=0;38;2;138;173;244:do=0;38;2;24;25;38;48;2;245;189;230:ex=1;38;2;237;135;150:fi=0:ln=0;38;2;245;189;230:mh=0:mi=0;38;2;24;25;38;48;2;237;135;150:no=0:or=0;38;2;24;25;38;48;2;237;135;150:ow=0:pi=0;38;2;24;25;38;48;2;138;173;244:rs=0:sg=0:so=0;38;2;24;25;38;48;2;245;189;230:st=0:su=0:tw=0:*.a=1;38;2;237;135;150:*.c=0;38;2;166;218;149:*.d=0;38;2;166;218;149:*.h=0;38;2;166;218;149:*.m=0;38;2;166;218;149:*.o=0;38;2;91;96;120:*.p=0;38;2;166;218;149:*.r=0;38;2;166;218;149:*.t=0;38;2;166;218;149:*.z=4;38;2;125;196;228:*.7z=4;38;2;125;196;228:*.as=0;38;2;166;218;149:*.bc=0;38;2;91;96;120:*.bz=4;38;2;125;196;228:*.cc=0;38;2;166;218;149:*.cp=0;38;2;166;218;149:*.cr=0;38;2;166;218;149:*.cs=0;38;2;166;218;149:*.di=0;38;2;166;218;149:*.el=0;38;2;166;218;149:*.ex=0;38;2;166;218;149:*.fs=0;38;2;166;218;149:*.go=0;38;2;166;218;149:*.gv=0;38;2;166;218;149:*.gz=4;38;2;125;196;228:*.hh=0;38;2;166;218;149:*.hi=0;38;2;91;96;120:*.hs=0;38;2;166;218;149:*.jl=0;38;2;166;218;149:*.js=0;38;2;166;218;149:*.ko=1;38;2;237;135;150:*.kt=0;38;2;166;218;149:*.la=0;38;2;91;96;120:*.ll=0;38;2;166;218;149:*.lo=0;38;2;91;96;120:*.md=0;38;2;238;212;159:*.ml=0;38;2;166;218;149:*.mn=0;38;2;166;218;149:*.nb=0;38;2;166;218;149:*.pl=0;38;2;166;218;149:*.pm=0;38;2;166;218;149:*.pp=0;38;2;166;218;149:*.ps=0;38;2;237;135;150:*.py=0;38;2;166;218;149:*.rb=0;38;2;166;218;149:*.rm=0;38;2;240;198;198:*.rs=0;38;2;166;218;149:*.sh=0;38;2;166;218;149:*.so=1;38;2;237;135;150:*.td=0;38;2;166;218;149:*.ts=0;38;2;166;218;149:*.ui=0;38;2;238;212;159:*.vb=0;38;2;166;218;149:*.wv=0;38;2;240;198;198:*.xz=4;38;2;125;196;228:*.aif=0;38;2;240;198;198:*.ape=0;38;2;240;198;198:*.apk=4;38;2;125;196;228:*.arj=4;38;2;125;196;228:*.asa=0;38;2;166;218;149:*.aux=0;38;2;91;96;120:*.avi=0;38;2;240;198;198:*.awk=0;38;2;166;218;149:*.bag=4;38;2;125;196;228:*.bak=0;38;2;91;96;120:*.bat=1;38;2;237;135;150:*.bbl=0;38;2;91;96;120:*.bcf=0;38;2;91;96;120:*.bib=0;38;2;238;212;159:*.bin=4;38;2;125;196;228:*.blg=0;38;2;91;96;120:*.bmp=0;38;2;240;198;198:*.bsh=0;38;2;166;218;149:*.bst=0;38;2;238;212;159:*.bz2=4;38;2;125;196;228:*.c++=0;38;2;166;218;149:*.cfg=0;38;2;238;212;159:*.cgi=0;38;2;166;218;149:*.clj=0;38;2;166;218;149:*.com=1;38;2;237;135;150:*.cpp=0;38;2;166;218;149:*.css=0;38;2;166;218;149:*.csv=0;38;2;238;212;159:*.csx=0;38;2;166;218;149:*.cxx=0;38;2;166;218;149:*.deb=4;38;2;125;196;228:*.def=0;38;2;166;218;149:*.dll=1;38;2;237;135;150:*.dmg=4;38;2;125;196;228:*.doc=0;38;2;237;135;150:*.dot=0;38;2;166;218;149:*.dox=0;38;2;139;213;202:*.dpr=0;38;2;166;218;149:*.elc=0;38;2;166;218;149:*.elm=0;38;2;166;218;149:*.epp=0;38;2;166;218;149:*.eps=0;38;2;240;198;198:*.erl=0;38;2;166;218;149:*.exe=1;38;2;237;135;150:*.exs=0;38;2;166;218;149:*.fls=0;38;2;91;96;120:*.flv=0;38;2;240;198;198:*.fnt=0;38;2;240;198;198:*.fon=0;38;2;240;198;198:*.fsi=0;38;2;166;218;149:*.fsx=0;38;2;166;218;149:*.gif=0;38;2;240;198;198:*.git=0;38;2;91;96;120:*.gvy=0;38;2;166;218;149:*.h++=0;38;2;166;218;149:*.hpp=0;38;2;166;218;149:*.htc=0;38;2;166;218;149:*.htm=0;38;2;238;212;159:*.hxx=0;38;2;166;218;149:*.ico=0;38;2;240;198;198:*.ics=0;38;2;237;135;150:*.idx=0;38;2;91;96;120:*.ilg=0;38;2;91;96;120:*.img=4;38;2;125;196;228:*.inc=0;38;2;166;218;149:*.ind=0;38;2;91;96;120:*.ini=0;38;2;238;212;159:*.inl=0;38;2;166;218;149:*.ipp=0;38;2;166;218;149:*.iso=4;38;2;125;196;228:*.jar=4;38;2;125;196;228:*.jpg=0;38;2;240;198;198:*.kex=0;38;2;237;135;150:*.kts=0;38;2;166;218;149:*.log=0;38;2;91;96;120:*.ltx=0;38;2;166;218;149:*.lua=0;38;2;166;218;149:*.m3u=0;38;2;240;198;198:*.m4a=0;38;2;240;198;198:*.m4v=0;38;2;240;198;198:*.mid=0;38;2;240;198;198:*.mir=0;38;2;166;218;149:*.mkv=0;38;2;240;198;198:*.mli=0;38;2;166;218;149:*.mov=0;38;2;240;198;198:*.mp3=0;38;2;240;198;198:*.mp4=0;38;2;240;198;198:*.mpg=0;38;2;240;198;198:*.nix=0;38;2;238;212;159:*.odp=0;38;2;237;135;150:*.ods=0;38;2;237;135;150:*.odt=0;38;2;237;135;150:*.ogg=0;38;2;240;198;198:*.org=0;38;2;238;212;159:*.otf=0;38;2;240;198;198:*.out=0;38;2;91;96;120:*.pas=0;38;2;166;218;149:*.pbm=0;38;2;240;198;198:*.pdf=0;38;2;237;135;150:*.pgm=0;38;2;240;198;198:*.php=0;38;2;166;218;149:*.pid=0;38;2;91;96;120:*.pkg=4;38;2;125;196;228:*.png=0;38;2;240;198;198:*.pod=0;38;2;166;218;149:*.ppm=0;38;2;240;198;198:*.pps=0;38;2;237;135;150:*.ppt=0;38;2;237;135;150:*.pro=0;38;2;139;213;202:*.ps1=0;38;2;166;218;149:*.psd=0;38;2;240;198;198:*.pyc=0;38;2;91;96;120:*.pyd=0;38;2;91;96;120:*.pyo=0;38;2;91;96;120:*.rar=4;38;2;125;196;228:*.rpm=4;38;2;125;196;228:*.rst=0;38;2;238;212;159:*.rtf=0;38;2;237;135;150:*.sbt=0;38;2;166;218;149:*.sql=0;38;2;166;218;149:*.sty=0;38;2;91;96;120:*.svg=0;38;2;240;198;198:*.swf=0;38;2;240;198;198:*.swp=0;38;2;91;96;120:*.sxi=0;38;2;237;135;150:*.sxw=0;38;2;237;135;150:*.tar=4;38;2;125;196;228:*.tbz=4;38;2;125;196;228:*.tcl=0;38;2;166;218;149:*.tex=0;38;2;166;218;149:*.tgz=4;38;2;125;196;228:*.tif=0;38;2;240;198;198:*.tml=0;38;2;238;212;159:*.tmp=0;38;2;91;96;120:*.toc=0;38;2;91;96;120:*.tsx=0;38;2;166;218;149:*.ttf=0;38;2;240;198;198:*.txt=0;38;2;238;212;159:*.vcd=4;38;2;125;196;228:*.vim=0;38;2;166;218;149:*.vob=0;38;2;240;198;198:*.wav=0;38;2;240;198;198:*.wma=0;38;2;240;198;198:*.wmv=0;38;2;240;198;198:*.xcf=0;38;2;240;198;198:*.xlr=0;38;2;237;135;150:*.xls=0;38;2;237;135;150:*.xml=0;38;2;238;212;159:*.xmp=0;38;2;238;212;159:*.yml=0;38;2;238;212;159:*.zip=4;38;2;125;196;228:*.zsh=0;38;2;166;218;149:*.zst=4;38;2;125;196;228:*TODO=1:*hgrc=0;38;2;139;213;202:*.bash=0;38;2;166;218;149:*.conf=0;38;2;238;212;159:*.dart=0;38;2;166;218;149:*.diff=0;38;2;166;218;149:*.docx=0;38;2;237;135;150:*.epub=0;38;2;237;135;150:*.fish=0;38;2;166;218;149:*.flac=0;38;2;240;198;198:*.h264=0;38;2;240;198;198:*.hgrc=0;38;2;139;213;202:*.html=0;38;2;238;212;159:*.java=0;38;2;166;218;149:*.jpeg=0;38;2;240;198;198:*.json=0;38;2;238;212;159:*.less=0;38;2;166;218;149:*.lisp=0;38;2;166;218;149:*.lock=0;38;2;91;96;120:*.make=0;38;2;139;213;202:*.mpeg=0;38;2;240;198;198:*.opus=0;38;2;240;198;198:*.orig=0;38;2;91;96;120:*.pptx=0;38;2;237;135;150:*.psd1=0;38;2;166;218;149:*.psm1=0;38;2;166;218;149:*.purs=0;38;2;166;218;149:*.rlib=0;38;2;91;96;120:*.sass=0;38;2;166;218;149:*.scss=0;38;2;166;218;149:*.tbz2=4;38;2;125;196;228:*.tiff=0;38;2;240;198;198:*.toml=0;38;2;238;212;159:*.webm=0;38;2;240;198;198:*.webp=0;38;2;240;198;198:*.woff=0;38;2;240;198;198:*.xbps=4;38;2;125;196;228:*.xlsx=0;38;2;237;135;150:*.yaml=0;38;2;238;212;159:*.cabal=0;38;2;166;218;149:*.cache=0;38;2;91;96;120:*.class=0;38;2;91;96;120:*.cmake=0;38;2;139;213;202:*.dyn_o=0;38;2;91;96;120:*.ipynb=0;38;2;166;218;149:*.mdown=0;38;2;238;212;159:*.patch=0;38;2;166;218;149:*.scala=0;38;2;166;218;149:*.shtml=0;38;2;238;212;159:*.swift=0;38;2;166;218;149:*.toast=4;38;2;125;196;228:*.xhtml=0;38;2;238;212;159:*README=0;38;2;36;39;58;48;2;238;212;159:*passwd=0;38;2;238;212;159:*shadow=0;38;2;238;212;159:*.config=0;38;2;238;212;159:*.dyn_hi=0;38;2;91;96;120:*.flake8=0;38;2;139;213;202:*.gradle=0;38;2;166;218;149:*.groovy=0;38;2;166;218;149:*.ignore=0;38;2;139;213;202:*.matlab=0;38;2;166;218;149:*COPYING=0;38;2;147;154;183:*INSTALL=0;38;2;36;39;58;48;2;238;212;159:*LICENSE=0;38;2;147;154;183:*TODO.md=1:*.desktop=0;38;2;238;212;159:*.gemspec=0;38;2;139;213;202:*Doxyfile=0;38;2;139;213;202:*Makefile=0;38;2;139;213;202:*TODO.txt=1:*setup.py=0;38;2;139;213;202:*.DS_Store=0;38;2;91;96;120:*.cmake.in=0;38;2;139;213;202:*.fdignore=0;38;2;139;213;202:*.kdevelop=0;38;2;139;213;202:*.markdown=0;38;2;238;212;159:*.rgignore=0;38;2;139;213;202:*COPYRIGHT=0;38;2;147;154;183:*README.md=0;38;2;36;39;58;48;2;238;212;159:*configure=0;38;2;139;213;202:*.gitconfig=0;38;2;139;213;202:*.gitignore=0;38;2;139;213;202:*.localized=0;38;2;91;96;120:*.scons_opt=0;38;2;91;96;120:*CODEOWNERS=0;38;2;139;213;202:*Dockerfile=0;38;2;238;212;159:*INSTALL.md=0;38;2;36;39;58;48;2;238;212;159:*README.txt=0;38;2;36;39;58;48;2;238;212;159:*SConscript=0;38;2;139;213;202:*SConstruct=0;38;2;139;213;202:*.gitmodules=0;38;2;139;213;202:*.synctex.gz=0;38;2;91;96;120:*.travis.yml=0;38;2;166;218;149:*INSTALL.txt=0;38;2;36;39;58;48;2;238;212;159:*LICENSE-MIT=0;38;2;147;154;183:*MANIFEST.in=0;38;2;139;213;202:*Makefile.am=0;38;2;139;213;202:*Makefile.in=0;38;2;91;96;120:*.applescript=0;38;2;166;218;149:*.fdb_latexmk=0;38;2;91;96;120:*CONTRIBUTORS=0;38;2;36;39;58;48;2;238;212;159:*appveyor.yml=0;38;2;166;218;149:*configure.ac=0;38;2;139;213;202:*.clang-format=0;38;2;139;213;202:*.gitattributes=0;38;2;139;213;202:*.gitlab-ci.yml=0;38;2;166;218;149:*CMakeCache.txt=0;38;2;91;96;120:*CMakeLists.txt=0;38;2;139;213;202:*LICENSE-APACHE=0;38;2;147;154;183:*CONTRIBUTORS.md=0;38;2;36;39;58;48;2;238;212;159:*.sconsign.dblite=0;38;2;91;96;120:*CONTRIBUTORS.txt=0;38;2;36;39;58;48;2;238;212;159:*requirements.txt=0;38;2;139;213;202:*package-lock.json=0;38;2;91;96;120:*.CFUserTextEncoding=0;38;2;91;96;120"
if which soffice > /dev/null; then 
  alias libreoffice="soffice"
fi

# Description: Terminal based file previewer
#
# Note: This plugin needs a "NNN_FIFO" to work. See man.
#
# Dependencies:
#   - Supports 5 independent methods to preview with:
#       - tmux (>=3.0), or
#       - kitty with allow_remote_control and listen_on set in kitty.conf, or
#       - QuickLook on WSL (https://github.com/QL-Win/QuickLook), or
#       - Windows Terminal (https://github.com/Microsoft/Terminal | https://aka.ms/terminal) with WSL, or
#       - $TERMINAL set to a terminal (it's xterm by default).
#   - less or $PAGER
#   - tree or exa or ls
#   - mediainfo or file
#   - mktemp
#   - unzip
#   - tar
#   - man
#   - optional: bsdtar or atool for additional archive preview
#   - optional: bat for code syntax highlighting
#   - optional: ueberzug, kitty terminal, viu or catimg for images
#   - optional: convert(ImageMagick) for playing gif preview (required for kitty image previews)
#   - optional: ffmpegthumbnailer for video thumbnails (https://github.com/dirkvdb/ffmpegthumbnailer)
#   - optional: ffmpeg for audio thumbnails
#   - optional: libreoffice for opendocument/officedocument preview
#   - optional: pdftoppm(poppler) for pdf thumbnails
#   - optional: gnome-epub-thumbnailer for epub thumbnails (https://gitlab.gnome.org/GNOME/gnome-epub-thumbnailer)
#   - optional: fontpreview for font preview (https://github.com/sdushantha/fontpreview)
#   - optional: djvulibre for djvu
#   - optional: glow or lowdown for markdown
#   - optional: w3m or lynx or elinks for html
#   - optional: set/export ICONLOOKUP as 1 to enable file icons in front of directory previews with .iconlookup
#       Icons and colors are configureable in .iconlookup
#   - optional: scope.sh file viewer from ranger.
#       1. drop scope.sh executable in $PATH
#       2. set/export $USE_SCOPE as 1
#   - optional: pistol file viewer (https://github.com/doronbehar/pistol).
#       1. install pistol
#       2. set/export $USE_PISTOL as 1
#
# Usage:
#   You need to set a NNN_FIFO path and a key for the plugin with NNN_PLUG,
#   then start `nnn`:
#
#     $ nnn -a
#
#   or
#
#     $ NNN_FIFO=/tmp/nnn.fifo nnn
#
#   Then launch the `preview-tui` plugin in `nnn`.
#
#   If you provide the same NNN_FIFO to all nnn instances, there will be a
#   single common preview window. If you provide different FIFO path (e.g.
#   with -a), they will be independent.
#
#   The previews will be shown in a tmux split. If that isn't possible, it
#   will try to use a kitty terminal split. And as a final fallback, a
#   different terminal window will be used ($TERMINAL).
#
#   Tmux and kitty users can configure $SPLIT to either "h" or "v" to set a
#   'h'orizontal split or a 'v'ertical split (as in, the line that splits the
#   windows will be horizontal or vertical).
#
#   Kitty users need something similar to the following in their kitty.conf:
#   - `allow_remote_control yes`
#   - `listen_on unix:$TMPDIR/kitty`
#   - `enabled_layouts splits` (optional)
#   With ImageMagick installed, this terminal can use the icat kitten to display images.
#   Refer to kitty documentation for further details.
#
#   Iterm2 users are recommended to use viu to view images without getting pixelated.
#
#   Windows Terminal users can set "Profile termination behavior" under "Profile > Advanced" settings
#   to automaticaly close pane on quit when exit code is 0.
#
# Shell: POSIX compliant
# Authors: Todd Yamakawa, Léo Villeveygoux, @Recidiviste, Mario Ortiz Manero, Luuk van Baal, @WanderLanz

#SPLIT="$SPLIT"  # you can set a permanent split here
#TERMINAL="$TERMINAL"  # same goes for the terminal
SPLIT_SIZE="${SPLIT_SIZE:-50}" # split size in percentage for supported previewers
USE_SCOPE="${USE_SCOPE:-0}"
USE_PISTOL="${USE_PISTOL:-0}"
ICONLOOKUP="${ICONLOOKUP:-0}"
PAGER="${PAGER:-less -P?n -R}"
TMPDIR="${TMPDIR:-/tmp}"
BAT_STYLE="${BAT_STYLE:-numbers}"
BAT_THEME="${BAT_THEME:-ansi}"
# Consider setting NNN_PREVIEWDIR to $XDG_CACHE_HOME/nnn/previews if you want to keep previews on disk between reboots
NNN_PREVIEWDIR="${NNN_PREVIEWDIR:-$TMPDIR/nnn/previews}"
NNN_PREVIEWWIDTH="${NNN_PREVIEWWIDTH:-1920}"
NNN_PREVIEWHEIGHT="${NNN_PREVIEWHEIGHT:-1080}"
NNN_PARENT="${NNN_FIFO#*.}"
[ "$NNN_PARENT" -eq "$NNN_PARENT" ] 2>/dev/null || NNN_PARENT=""
FIFOPID="$TMPDIR/nnn-preview-tui-fifopid.$NNN_PARENT"
PREVIEWPID="$TMPDIR/nnn-preview-tui-pagerpid.$NNN_PARENT"
CURSEL="$TMPDIR/nnn-preview-tui-selection.$NNN_PARENT"
FIFO_UEBERZUG="$TMPDIR/nnn-preview-tui-ueberzug-fifo.$NNN_PARENT"
POSOFFSET="$TMPDIR/nnn-preview-tui-posoffset"

exists() { type "$1" >/dev/null 2>&1 ;}
pkill() { command pkill "$@" >/dev/null 2>&1 ;}
pidkill() { [ -f "$1" ] && kill "$(cat "$1")" >/dev/null 2>&1 ;}
prompt() { printf "%b" "$@"; cfg=$(stty -g); stty raw -echo; head -c 1; stty "$cfg" ;}

start_preview() {
  [ "$PAGER" = "most" ] && PAGER="less -R"

  if [ -e "${TMUX%%,*}" ] && tmux -V | grep -q '[ -][3456789]\.'; then
    TERMINAL=tmux
  elif [ -n "$KITTY_LISTEN_ON" ]; then
    TERMINAL=kitty
  elif [ -z "$TERMINAL" ] && [ "$TERM_PROGRAM" = "iTerm.app" ]; then
    TERMINAL=iterm
  elif [ -n "$WT_SESSION" ]; then
    TERMINAL=winterm
  else
    TERMINAL="${TERMINAL:-xterm}"
  fi

  if [ -z "$SPLIT" ] && [ $(($(tput lines) * 2)) -gt "$(tput cols)" ]; then
    SPLIT='h'
  elif [ "$SPLIT" != 'h' ]; then
    SPLIT='v'
  fi

  case "$TERMINAL" in
    tmux) # tmux splits are inverted
      if [ "$SPLIT" = "v" ]; then DSPLIT="h"; else DSPLIT="v"; fi
      tmux split-window -e "NNN_FIFO=$NNN_FIFO" -e "PREVIEW_MODE=1" -e "CURSEL=$CURSEL" \
        -e "TMPDIR=$TMPDIR" -e "FIFOPID=$FIFOPID" -e "POSOFFSET=$POSOFFSET" \
        -e "BAT_STYLE=$BAT_STYLE" -e "BAT_THEME=$BAT_THEME" -e "PREVIEWPID=$PREVIEWPID" \
        -e "PAGER=$PAGER" -e "ICONLOOKUP=$ICONLOOKUP" -e "NNN_PREVIEWWIDTH=$NNN_PREVIEWWIDTH" \
        -e "USE_SCOPE=$USE_SCOPE" -e "SPLIT=$SPLIT" -e "USE_PISTOL=$USE_PISTOL" \
        -e "NNN_PREVIEWDIR=$NNN_PREVIEWDIR" -e "NNN_PREVIEWHEIGHT=$NNN_PREVIEWHEIGHT" \
        -e "FIFO_UEBERZUG=$FIFO_UEBERZUG" -e "QLPATH=$2" -d"$DSPLIT" -p"$SPLIT_SIZE" "$0" "$1" ;;
            kitty) # Setting the layout for the new window. It will be restored after the script ends.
              kitty @ goto-layout splits
              # Trying to use kitty's integrated window management as the split window. All
              # environmental variables that will be used in the new window must be explicitly passed.
              kitty @ launch --no-response --title "nnn preview" --keep-focus \
                --cwd "$PWD" --env "PATH=$PATH" --env "NNN_FIFO=$NNN_FIFO" \
                --env "PREVIEW_MODE=1" --env "PAGER=$PAGER" --env "TMPDIR=$TMPDIR" \
                --env "USE_SCOPE=$USE_SCOPE" --env "SPLIT=$SPLIT" --env "TERMINAL=$TERMINAL"\
                --env "PREVIEWPID=$PREVIEWPID" --env "FIFO_UEBERZUG=$FIFO_UEBERZUG" \
                --env "ICONLOOKUP=$ICONLOOKUP" --env "NNN_PREVIEWHEIGHT=$NNN_PREVIEWHEIGHT" \
                --env "NNN_PREVIEWWIDTH=$NNN_PREVIEWWIDTH" --env "NNN_PREVIEWDIR=$NNN_PREVIEWDIR" \
                --env "USE_PISTOL=$USE_PISTOL" --env "BAT_STYLE=$BAT_STYLE" \
                --env "BAT_THEME=$BAT_THEME" --env "FIFOPID=$FIFOPID" \
                --env "CURSEL=$CURSEL" --location "${SPLIT}split" "$0" "$1" ;;
                            iterm)
                              command="$SHELL -c 'cd $PWD; \
                                PATH=\\\"$PATH\\\" NNN_FIFO=\\\"$NNN_FIFO\\\" PREVIEW_MODE=1 PAGER=\\\"$PAGER\\\" \
                                USE_SCOPE=\\\"$USE_SCOPE\\\" SPLIT=\\\"$SPLIT\\\" TERMINAL=\\\"$TERMINAL\\\" \
                                PREVIEWPID=\\\"$PREVIEWPID\\\" CURSEL=\\\"$CURSEL\\\" TMPDIR=\\\"$TMPDIR\\\" \
                                ICONLOOKUP=\\\"$ICONLOOKUP\\\" NNN_PREVIEWHEIGHT=\\\"$NNN_PREVIEWHEIGHT\\\" \
                                NNN_PREVIEWWIDTH=\\\"$NNN_PREVIEWWIDTH\\\" NNN_PREVIEWDIR=\\\"$NNN_PREVIEWDIR\\\" \
                                USE_PISTOL=\\\"$USE_PISTOL\\\" BAT_STYLE=\\\"$BAT_STYLE\\\" \
                                BAT_THEME=\\\"$BAT_THEME\\\" FIFOPID=\\\"$FIFOPID\\\" \\\"$0\\\" \\\"$1\\\"'"
                                if [ "$SPLIT" = "h" ]; then split="horizontally"; else split="vertically"; fi
                                osascript <<-EOF
                                tell application "iTerm"
                                tell current session of current window
                                split $split with default profile command "$command"
                              end tell
                            end tell
EOF
;;
winterm)
  if [ "$SPLIT" = "h" ]; then split="H"; else split="V"; fi
  cmd.exe /c wt -w 0 sp -$split -s$((SPLIT_SIZE / 100)) bash -c "cd $PWD \; \
    PATH='$PATH' NNN_FIFO=$NNN_FIFO PREVIEW_MODE=1 CURSEL=$CURSEL TMPDIR=$TMPDIR \
    FIFOPID=$FIFOPID BAT_STYLE=$BAT_STYLE BAT_THEME=$BAT_THEME PREVIEWPID=$PREVIEWPID \
    PAGER='$PAGER' ICONLOOKUP=$ICONLOOKUP NNN_PREVIEWWIDTH=$NNN_PREVIEWWIDTH \
    USE_SCOPE=$USE_SCOPE SPLIT=$SPLIT USE_PISTOL=$USE_PISTOL \
    NNN_PREVIEWDIR=$NNN_PREVIEWDIR NNN_PREVIEWHEIGHT=$NNN_PREVIEWHEIGHT \
    FIFO_UEBERZUG=$FIFO_UEBERZUG QLPATH=$2 $0 $1" \; -w 0 mf previous
      ;;
    *)  if [ -n "$2" ]; then
      QUICKLOOK=1 QLPATH="$2" PREVIEW_MODE=1 "$0" "$1" &
    else
      PREVIEWPID="$PREVIEWPID" CURSEL="$CURSEL" PREVIEW_MODE=1 \
        FIFOPID="$FIFOPID" FIFO_UEBERZUG="$FIFO_UEBERZUG" $TERMINAL -e "$0" "$1" &
              fi ;;
          esac
        }

        toggle_preview() {
          if exists QuickLook.exe; then
            QLPATH="QuickLook.exe"
          elif exists Bridge.exe; then
            QLPATH="Bridge.exe"
          fi
          if pidkill "$FIFOPID"; then
            [ -p "$NNN_PPIPE" ] && printf "0" > "$NNN_PPIPE"
            pidkill "$PREVIEWPID"
            pkill -f "tail --follow $FIFO_UEBERZUG"
            if [ -n "$QLPATH" ] && stat "$1"; then
              f="$(wslpath -w "$1")" && "$QLPATH" "$f" &
            fi
          else
            [ -p "$NNN_PPIPE" ] && printf "1" > "$NNN_PPIPE"
            start_preview "$1" "$QLPATH"
          fi
        }

        fifo_pager() {
          cmd="$1"
          shift

    # We use a FIFO to access $PAGER PID in jobs control
    tmpfifopath="$TMPDIR/nnn-preview-tui-fifo.$$"
    mkfifo "$tmpfifopath" || return

    $PAGER < "$tmpfifopath" &
    printf "%s" "$!" > "$PREVIEWPID"

    (
    exec > "$tmpfifopath"
    if [ "$cmd" = "pager" ]; then
      if exists bat; then
        bat --terminal-width="$cols" --decorations=always --color=always \
          --paging=never --style="$BAT_STYLE" --theme="$BAT_THEME" "$@" &
                else
                  $PAGER "$@" &
      fi
    else
      "$cmd" "$@" &
    fi
  )

  rm "$tmpfifopath"
}

# Binary file: show file info inside the pager
print_bin_info() {
  printf -- "-------- \033[1;31mBinary file\033[0m --------\n"
  if exists mediainfo; then
    mediainfo "$1"
  else
    file -b "$1"
  fi
}

handle_mime() {
  case "$2" in
    image/jpeg) image_preview "$cols" "$lines" "$1" ;;
    image/gif) generate_preview "$cols" "$lines" "$1" "gif" ;;
    image/vnd.djvu) generate_preview "$cols" "$lines" "$1" "djvu" ;;
    image/*) generate_preview "$cols" "$lines" "$1" "image" ;;
    video/*) generate_preview "$cols" "$lines" "$1" "video" ;;
    audio/*) generate_preview "$cols" "$lines" "$1" "audio" ;;
    application/font*|application/*opentype|font/*) generate_preview "$cols" "$lines" "$1" "font" ;;
    */*office*|*/*document*) generate_preview "$cols" "$lines" "$1" "office" ;;
    application/zip) fifo_pager unzip -l "$1" ;;
    text/troff)
      if exists man; then
        fifo_pager man -Pcat -l "$1"
      else
        fifo_pager pager "$1"
        fi ;;
      *) handle_ext "$1" "$3" "$4" ;;
    esac
  }

  handle_ext() {
    case "$2" in
      epub) generate_preview "$cols" "$lines" "$1" "epub" ;;
      pdf) generate_preview "$cols" "$lines" "$1" "pdf" ;;
      gz|bz2) fifo_pager tar -tvf "$1" ;;
      md) if exists glow; then
        fifo_pager glow -s dark "$1"
      elif exists lowdown; then
        fifo_pager lowdown -Tterm "$1"
      else
        fifo_pager pager "$1"
        fi ;;
      htm|html|xhtml)
        if exists w3m; then
          fifo_pager w3m "$1"
        elif exists lynx; then
          fifo_pager lynx "$1"
        elif exists elinks; then
          fifo_pager elinks "$1"
        else
          fifo_pager pager "$1"
          fi ;;
          7z|a|ace|alz|arc|arj|bz|cab|cpio|deb|jar|lha|lz|lzh|lzma|lzo\
            |rar|rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z)
                      if exists atool; then
                        fifo_pager atool -l "$1"
                      elif exists bsdtar; then
                        fifo_pager bsdtar -tvf "$1"
                        fi ;;
                      *) if [ "$3" = "bin" ]; then
                        fifo_pager print_bin_info "$1"
                      else
                        fifo_pager pager "$1"
                        fi ;;
                    esac
                  }

                  preview_file() {
                    clear
                    # Trying to use pistol if it's available.
                    if [ "$USE_PISTOL" -ne 0 ] && exists pistol; then
                      fifo_pager pistol "$1"
                      return
                    fi

    # Trying to use scope.sh if it's available.
    if [ "$USE_SCOPE" -ne 0 ] && exists scope.sh; then
      fifo_pager scope.sh "$1" "$cols" "$lines" "$(mktemp -d)" "True"
      return
    fi

    # Use QuickLook if it's available.
    if [ -n "$QUICKLOOK" ]; then
      stat "$1" && f="$(wslpath -w "$1")" && "$QLPATH" "$f" &
      return
    fi

    # Detecting the exact type of the file: the encoding, mime type, and extension in lowercase.
    encoding="$(file -bL --mime-encoding -- "$1")"
    mimetype="$(file -bL --mime-type -- "$1")"
    ext="${1##*.}"
    [ -n "$ext" ] && ext="$(printf "%s" "${ext}" | tr '[:upper:]' '[:lower:]')"
    lines=$(tput lines)
    cols=$(tput cols)

    # Otherwise, falling back to the defaults.
    if [ -d "$1" ]; then
      cd "$1" || return
      if [ "$ICONLOOKUP" -ne 0 ] && [ -f "$(dirname "$0")"/.iconlookup ]; then
        [ "$SPLIT" = v ] && BSTR="\n"
        # shellcheck disable=SC2012
        ls -F --group-directories-first | head -n "$((lines - 3))" | "$(dirname "$0")"/.iconlookup -l "$cols" -B "$BSTR" -b " "
      elif exists tree; then
        fifo_pager tree --filelimit "$(find . -maxdepth 1 | wc -l)" -L 3 -C -F --dirsfirst --noreport
      elif exists eza; then
        printf "\n\n";
        # eza --oneline --group-directories-first --colour=always
        eza --oneline --icons --group-directories-first --colour=always
      else
        fifo_pager ls -F --group-directories-first --color=always
      fi
    elif [ "${encoding#*)}" = "binary" ]; then
      handle_mime "$1" "$mimetype" "$ext" "bin"
    else
      handle_mime "$1" "$mimetype" "$ext"
    fi
  }

  generate_preview() {
    if [ -n "$QLPATH" ] && stat "$3"; then
      f="$(wslpath -w "$3")" && "$QLPATH" "$f" &
    elif [ ! -f "$NNN_PREVIEWDIR/$3.jpg" ] || [ -n "$(find -L "$3" -newer "$NNN_PREVIEWDIR/$3.jpg")" ]; then
      mkdir -p "$NNN_PREVIEWDIR/${3%/*}"
      case $4 in
        audio) ffmpeg -i "$3" -filter_complex "scale=iw*min(1\,min($NNN_PREVIEWWIDTH/iw\,ih)):-1" "$NNN_PREVIEWDIR/$3.jpg" -y ;;
        epub) gnome-epub-thumbnailer "$3" "$NNN_PREVIEWDIR/$3.jpg" ;;
        font) fontpreview -i "$3" -o "$NNN_PREVIEWDIR/$3.jpg" ;;
        gif) if [ -p "$FIFO_UEBERZUG" ] && exists convert; then
          frameprefix="$NNN_PREVIEWDIR/$3/${3##*/}"
          if [ ! -d "$NNN_PREVIEWDIR/$3" ]; then
            mkdir -p "$NNN_PREVIEWDIR/$3"
            convert -coalesce -resize "$NNN_PREVIEWWIDTH"x"$NNN_PREVIEWHEIGHT"\> "$3" "$frameprefix.jpg" ||
              MAGICK_TMPDIR="/tmp" convert -coalesce -resize "$NNN_PREVIEWWIDTH"x"$NNN_PREVIEWHEIGHT"\> "$3" "$frameprefix.jpg"
          fi
          frames=$(($(find "$NNN_PREVIEWDIR/$3" | wc -l) - 2))
          [ $frames -lt 0 ] && return
          while true; do
            for i in $(seq 0 $frames); do
              image_preview "$1" "$2" "$frameprefix-$i.jpg"
              sleep 0.1
            done
          done &
          printf "%s" "$!" > "$PREVIEWPID"
          return
        else
          image_preview "$1" "$2" "$3"
          return
          fi ;;
        image) if exists convert; then
          convert "$3" -flatten -resize "$NNN_PREVIEWWIDTH"x"$NNN_PREVIEWHEIGHT"\> "$NNN_PREVIEWDIR/$3.jpg"
        else
          image_preview "$1" "$2" "$3" && return
          fi ;;
        office) libreoffice --convert-to jpg "$3" --outdir "$NNN_PREVIEWDIR/${3%/*}"
          filename="$(printf "%s" "${3##*/}" | cut -d. -f1)"
          mv "$NNN_PREVIEWDIR/${3%/*}/$filename.jpg" "$NNN_PREVIEWDIR/$3.jpg" ;;
        pdf) pdftoppm -jpeg -f 1 -singlefile "$3" "$NNN_PREVIEWDIR/$3" ;;
        djvu) ddjvu -format=ppm -page=1 "$3" "$NNN_PREVIEWDIR/$3.jpg" ;;
        video) ffmpegthumbnailer -m -s0 -i "$3" -o "$NNN_PREVIEWDIR/$3.jpg" || rm "$NNN_PREVIEWDIR/$3.jpg" ;;
      esac
    fi
    if [ -f "$NNN_PREVIEWDIR/$3.jpg" ]; then
      image_preview "$1" "$2" "$NNN_PREVIEWDIR/$3.jpg"
    else
      fifo_pager print_bin_info "$3"
    fi
  } >/dev/null 2>&1

  image_preview() {
    clear
    exec >/dev/tty
    if [ "$TERMINAL" = "kitty" ]; then
      # Kitty terminal users can use the native image preview method
      kitty +kitten icat --silent --scale-up --place "$1"x"$2"@0x0 --transfer-mode=stream --stdin=no "$3" &
    elif exists ueberzug; then
      ueberzug_layer "$1" "$2" "$3" && return
    elif exists catimg; then
      catimg "$3" &
    elif exists viu; then
      viu -t "$3" &
    else
      fifo_pager print_bin_info "$3" && return
    fi
    printf "%s" "$!" > "$PREVIEWPID"
  }

  ueberzug_layer() {
    [ -f "$POSOFFSET" ] && read -r x y < "$POSOFFSET"
    printf '{"action": "add", "identifier": "nnn_ueberzug", "x": %d, "y": %d, "width": "%d", "height": "%d", "scaler": "fit_contain", "path": "%s"}\n'\
      "${x:-0}" "${y:-0}" "$1" "$2" "$3" > "$FIFO_UEBERZUG"
    }

    ueberzug_remove() {
      printf '{"action": "remove", "identifier": "nnn_ueberzug"}\n' > "$FIFO_UEBERZUG"
    }

    winch_handler() {
      clear
      pidkill "$PREVIEWPID"
      if [ -p "$FIFO_UEBERZUG" ]; then
        pkill -f "tail --follow $FIFO_UEBERZUG"
        tail --follow "$FIFO_UEBERZUG" | ueberzug layer --silent --parser json &
      fi
      preview_file "$(cat "$CURSEL")"
    }

    preview_fifo() {
      while read -r selection; do
        if [ -n "$selection" ]; then
          pidkill "$PREVIEWPID"
          [ -p "$FIFO_UEBERZUG" ] && ueberzug_remove
          [ "$selection" = "close" ] && break
          preview_file "$selection"
          printf "%s" "$selection" > "$CURSEL"
        fi
      done < "$NNN_FIFO"
      sleep 0.1 # make sure potential preview by winch_handler is killed
      pkill -P "$$"
    }

    if [ "$PREVIEW_MODE" ]; then
      if [ "$TERMINAL" != "kitty" ] && exists ueberzug; then
        mkfifo "$FIFO_UEBERZUG"
        tail --follow "$FIFO_UEBERZUG" | ueberzug layer --silent --parser json &
      fi

      preview_file "$PWD/$1"
      preview_fifo &
      printf "%s" "$!" > "$FIFOPID"
      printf "%s" "$PWD/$1" > "$CURSEL"
      trap 'winch_handler; wait' WINCH
      trap 'rm "$PREVIEWPID" "$CURSEL" "$FIFO_UEBERZUG" "$FIFOPID" "$POSOFFSET" 2>/dev/null' INT HUP EXIT
      wait "$!" 2>/dev/null
      exit 0
    else
      if [ ! -r "$NNN_FIFO" ]; then
        clear
        prompt "No FIFO available! (\$NNN_FIFO='$NNN_FIFO')\nPlease read Usage in preview-tui."
      elif [ "$KITTY_WINDOW_ID" ] && [ -z "$TMUX" ] && [ -z "$KITTY_LISTEN_ON" ]; then
        clear
        prompt "\$KITTY_LISTEN_ON not set!\nPlease read Usage in preview-tui."
      else
        toggle_preview "$1" &
      fi
    fi
